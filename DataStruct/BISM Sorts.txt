BUBBLE SORTS

import java.util.Random;
import java.util.Scanner;

public class SelectionSort {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter array size (1-100): ");
        int arraySize;
        while (true) {
            try {
                arraySize = Integer.parseInt(scanner.nextLine());
                if (arraySize >= 1 && arraySize <= 100) {
                    break;
                } else {
                    System.out.print("Invalid size. Please enter a number between 1 and 100: ");
                }
            } catch (NumberFormatException e) {
                System.out.print("Invalid size. Please enter a number between 1 and 100: ");
            }
        }
        int[] array = new int[arraySize];
        Random random = new Random();
        for (int i = 0; i < arraySize; i++) {
            array[i] = random.nextInt(201) - 100;
        }
        System.out.print("Array content: ");
        for (int i = 0; i < arraySize; i++) {
            System.out.print(array[i]);
            if (i < arraySize - 1) {
                System.out.print(", ");
            }
        }
        System.out.println();
        selectionSort(array);
        System.out.print("Sorted array: ");
        for (int i = 0; i < arraySize; i++) {
            System.out.print(array[i]);
            if (i < arraySize - 1) {
                System.out.print(", ");
            }
        }
    }

    public static void selectionSort(int[] array) {
        int size = array.length;
        boolean swapped;
        for (int i = 0; i < size - 1; i++) {
            swapped = false;
            int minIndex = i;
            for (int j = i + 1; j < size; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                    swapped = true;
                }
            }
            if (swapped) {
                // Swap elements
                int temp = array[i];
                array[i] = array[minIndex];
                array[minIndex] = temp;
            } else {
                break;
            }
            System.out.print("Iteration " + (i + 1) + ": ");
            for (int num : array) {
                System.out.print(num + ", ");
            }
            System.out.println();
        }
    }
}


======================

SELECTION SORTS

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class ShellSort {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = getValidInput("Enter array size (1-100): ", scanner);

        int[] array = generateRandomArray(arraySize);
        System.out.println("Array content: " + Arrays.toString(array));

        shellSort(array);

        System.out.println("Sorted Array: " + Arrays.toString(array));
        scanner.close();
    }

    public static void shellSort(int[] arr) {
        int size = arr.length;
        for (int gap = size / 2; gap > 0; gap /= 2) {
            for (int i = gap; i < size; i++) {
                int currentElement = arr[i];
                int j;
                for (j = i; j >= gap && arr[j - gap] > currentElement; j -= gap) {
                    arr[j] = arr[j - gap];
                }
                arr[j] = currentElement;
            }
            System.out.print("Gap " + gap + " Iteration: ");
            System.out.println(Arrays.toString(arr));
        }
    }

    private static int getValidInput(String message, Scanner sc) {
        int size;
        while (true) {
            try {
                System.out.print(message);
                size = sc.nextInt();
                if (size >= 1 && size <= 100) {
                    return size;
                } else {
                    System.out.println("Invalid input. Please enter a number between 1 and 100.");
                }
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter an integer. Try again.");
                sc.nextLine();
            }
        }
    }

    public static int[] generateRandomArray(int size) {
        int[] array = new int[size];
        Random random = new Random();

        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(201) - 100;
        }
        return array;
    }
}


==============

INSERTION SORTS

import java.util.Random;
import java.util.Scanner;

public class InsertionSort {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter array size (1-100): ");
        int arraySize;
        while (true) {
            try {
                arraySize = Integer.parseInt(scanner.nextLine());
                if (arraySize >= 1 && arraySize <= 100) {
                    break;
                } else {
                    System.out.print("Invalid size. Please enter a number between 1 and 100: ");
                }
            } catch (NumberFormatException e) {
                System.out.print("Invalid size. Please enter a number between 1 and 100: ");
            }
        }
        int[] array = new int[arraySize];
        Random random = new Random();
        for (int i = 0; i < arraySize; i++) {
            array[i] = random.nextInt(201) - 100;
        }
        System.out.print("Array content: ");
        for (int i = 0; i < arraySize; i++) {
            System.out.print(array[i]);
            if (i < arraySize - 1) {
                System.out.print(", ");
            }
        }
        System.out.println();
        insertionSort(array);
        System.out.print("Sorted array: ");
        for (int i = 0; i < arraySize; i++) {
            System.out.print(array[i]);
            if (i < arraySize - 1) {
                System.out.print(", ");
            }
        }
    }

    public static void insertionSort(int[] arr) {
        int arrayLength = arr.length;
        boolean swapped;
        for (int i = 1; i < arrayLength; i++) {
            int key = arr[i];
            int j = i - 1;
            swapped = false;
            
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
                swapped = true;
            }

            arr[j + 1] = key;

            if (swapped) {
                System.out.print("Iteration " + i + ": ");
                for (int num : arr) {
                    System.out.print(num + ", ");
                }
                System.out.println();
            }
        }
    }
}
